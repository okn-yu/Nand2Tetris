// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */

    static Array bitArray;
    static int bitMaxLen;

    function void init() {

        let bitArray = Array.new(16);
        let bitArray[0] = 1;
        let bitArray[1] = 2;
        let bitArray[2] = 4;
        let bitArray[3] = 8;
        let bitArray[4] = 16;
        let bitArray[5] = 32;
        let bitArray[6] = 64;
        let bitArray[7] = 128;
        let bitArray[8] = 256;
        let bitArray[9] = 512;
        let bitArray[10] = 1024;
        let bitArray[11] = 2048;
        let bitArray[12] = 4096;
        let bitArray[13] = 8192;
        let bitArray[14] = 16384;
        /* 32768 is too big. failed to compile! */
        let bitArray[15] = bitArray[14] + bitArray[14];

        let bitMaxLen = 16;

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0) {
            return x;
        }
        else{
            return -x;
        }
    }

    /** check if j-th bit of integer i. */
    function int bit(int i, int j) {
        var int flag;
        let flag = 0;

        if((bitArray[j-1] & i) = bitArray[j-1]){
            return true;
        }else{
            return false;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {

        var int sum, shiftedX, n_bit, y_bit;

        let sum = 0;
        let n_bit = 1;
        let shiftedX = x;

        while(n_bit < (bitMaxLen + 1)){

            if(Math.bit(y, n_bit)){
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let n_bit = n_bit + 1;
        }
        return sum;

    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {

        var int count, shifted_y;
        var boolean loop;
        let shifted_y = y;
        let count = 1;
        let loop = true;

        if(x < y){
            return 0;
        }

        while(loop){
            if(x < Math.multiply(shifted_y, 2) | (x = shifted_y)){
                let loop = false;
                let x = x - shifted_y;
            }else{
                let loop = true;
                let shifted_y = Math.multiply(shifted_y, 2);
                let count = Math.multiply(count, 2);
            }
        }

        return count;

        /**
        while(~loop){
            if(y < x){
                let count = count + 1;
                let x= x - y;
            }else{
                if(y = x){
                    let count = count + 1;
                    let loop = true;
                }else{
                    let loop = true;
                }
            }
        }
         return count;
        **/
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {

        var int n;
        let n = Math.divide(x, 2);

        while( Math.multiply(n, n) >  x){
            let n = n - 1;
        }
        return n;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a < b) {
            return b;
        }
        else{
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a > b) {
            return b;
        }
        else{
            return a;
        }
    }
}
