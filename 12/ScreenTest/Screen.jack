// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screenMap;
    static boolean color;
    static String bitArray;

    /** Initializes the Screen. */
    function void init() {
        let screenMap = 16384;
        let color = true;
        let bitArray = Array.new(16);
        let bitArray[0] = 1;
        let bitArray[1] = 2;
        let bitArray[2] = 4;
        let bitArray[3] = 8;
        let bitArray[4] = 16;
        let bitArray[5] = 32;
        let bitArray[6] = 64;
        let bitArray[7] = 128;
        let bitArray[8] = 256;
        let bitArray[9] = 512;
        let bitArray[10] = 1024;
        let bitArray[11] = 2048;
        let bitArray[12] = 4096;
        let bitArray[13] = 8192;
        let bitArray[14] = 16384;
        //let bitArray[15] = ~32767;
        let bitArray[15] = 16384 + 16384;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;

        //while(i < 8192) {
        //    let screenMap[i] = 0;
        //}
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, rem, bit, mask;

        let addr = (x * 32) + Screen.fourRightShift(y);
        let mask = Screen.createMask(y);

        if(color){
            let screenMap[addr] = screenMap[addr] | mask;
        }else{
            let screenMap[addr] = screenMap[addr] & (~mask);
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, addX, addY, dx0, dy0, dx, dy;

        let x = x1;
        let y = y1;
        let dx0 = x2 - x1;
        let dy0 = y2 - y1;
        let dx = 1;
        let dy = 1;

        if(dx0 < 0){
            let addX = -1;
        }
        if(dx0 = 0){
            let addX = 0;
        }
        if(0 < dx0){
            let addX = 1;
        }
        if(dy0 < 0){
            let addY = -1;
        }
        if(dy0 = 0){
            let addY = 0;
        }
        if(0 < dy0){
            let addY = 1;
        }

        if(dx0 * dy0 = 0){
            do Screen.drawPixel(y, x);
            if(dx0 = 0){
                while(~(y = y2)){
                    let y = y + addY;
                    do Screen.drawPixel(y, x);
                }
            }else{
                while(~(x = x2)){
                    let x = x + addX;
                    do Screen.drawPixel(y, x);
                }
            }
        }else{
             while(~((x = x2) & (y = y2))){

                if(Math.abs(dy * dx0) < Math.abs(dy0 * dx)){
                    let y = y + addY;
                    let dy = y - y1;
                }else{
                    let x = x + addX;
                    let dx = x - x1;
                }
                do Screen.drawPixel(y, x);
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {

        var int y;
        let y = y1;

        while(~(y > y2)){
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dx, dy;
        let dx = 0;
        let dy = 0;

        while(dy < r){
            let dx = Math.sqrt((r*r) - (dy*dy));
            do Screen.drawLine(x - dx, y + dy, x + dx, y + dy);
            do Screen.drawLine(x - dx, y - dy, x + dx, y - dy);
            let dy = dy + 1;
        }

        return;
    }

    function int createMask(int a){
        var int mask;
        let mask = 1;

        return bitArray[a & 15];
    }

    function int fourRightShift(int a){
        var int i, result;
        let i = 4;

        while(i < 16){
            if(bitArray[i] & a = bitArray[i]){
                let result = result + bitArray[i - 4];
            }
            let i = i + 1;
        }

        return result;
    }
}
