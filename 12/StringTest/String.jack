// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array stringArray;
    field int stringLength;
    field int currentIndex;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {

        if(maxLength < 1){
            return this;
        }else{
            let stringLength = maxLength;
            let currentIndex = 0;
            let stringArray = Memory.alloc(maxLength);
            return this;
        }
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentIndex;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return stringArray[j+1];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let stringArray[j+1] = c;

        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let currentIndex = currentIndex + 1;
        let stringArray[currentIndex] = c;

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let stringLength = stringLength - 1;

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int num, index;
        let index = 0;
        let num = 0;

        while(index < stringLength){
            let num = (num * 10) + (stringArray[index] + 48);
            let index = index + 1;
        }
        return num;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        do appendChar(val + 48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
